# This provisions the controllers with certificates, etcd, and kubernetes api server
resource "null_resource" "controllers" {
  count = var.controller_count
  triggers = {
    address     = null_resource.api_ssl.triggers.address
    config_ip   = null_resource.kube_configs.triggers.address
    username    = var.username
    external_ip = google_compute_instance.controller[count.index].network_interface.0.access_config.0.nat_ip
    worker_ip   = google_compute_instance.worker[count.index].name
  }
  connection {
    host = self.triggers.external_ip
    user = self.triggers.username
  }

  # https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/04-certificate-authority.md#distribute-the-client-and-server-certificates
  # The file provisioner copies files that were generated by the ssl-provisioner.tf to the controllers
  provisioner "file" {
    source      = "ssl/ca.pem"
    destination = "~/ca.pem"
  }
  provisioner "file" {
    source      = "ssl/service-account.pem"
    destination = "~/service-account.pem"
  }
  provisioner "file" {
    source      = "ssl/service-account-key.pem"
    destination = "~/service-account-key.pem"
  }
  provisioner "file" {
    source      = "ssl/kubernetes.pem"
    destination = "~/kubernetes.pem"
  }
  provisioner "file" {
    source      = "ssl/kubernetes-key.pem"
    destination = "~/kubernetes-key.pem"
  }

  # https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/07-bootstrapping-etcd.md  
  provisioner "remote-exec" {
    scripts = [
      "kube_scripts/etcd_bootstrap.sh"
    ]
  }

  # Now copy the kubeconfigs to the controllers
  provisioner "file" {
    source      = "kube_configs/admin.kubeconfig"
    destination = "~/admin.kubeconfig"
  }
  provisioner "file" {
    source      = "kube_configs/kube-controller-manager.kubeconfig"
    destination = "~/kube-controller-manager.kubeconfig"
  }
  provisioner "file" {
    source      = "kube_configs/kube-scheduler.kubeconfig"
    destination = "~/kube-scheduler.kubeconfig"
  }
  provisioner "file" {
    source      = "kube_configs/encryption-config.yaml"
    destination = "~/encryption-config.yaml"
  }

  # Finally, bootstrap the kubernetes api
  # https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/08-bootstrapping-kubernetes-controllers.md
  provisioner "remote-exec" {
    scripts = [
      "kube_scripts/kubernetes_bootstrap.sh"
    ]
  }
}

# Health checks and forwarding is set up in load_balancer.tf
